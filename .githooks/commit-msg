#!/bin/bash

COMMIT_MSG_FILE="$1"
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
CONFIG_FILE="docs/todo/config"
TODO_FILE="docs/todo/todo.txt"
DONE_FILE="docs/todo/done.txt"

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RESET='\033[0m'
# ANSI colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[1;34m'
BOLD='\033[1m'
RESET='\033[0m'

echo "Running full pre-commit from commit-msg hook..."
uv run pre-commit run --all-files
STATUS=$?

if [ "$STATUS" -ne 0 ]; then
  echo "❌ pre-commit hook failed"
  exit "$STATUS"
fi
# run togit-parser in files staged for commit:
if command -v togit-parser >/dev/null 2>&1; then
  echo
  echo -e "${GREEN}${BOLD} === RUNNING togit-parser ON STAGED FILES... === ${RESET}"

  # Get all staged files
  STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

  if [[ -n "$STAGED_FILES" ]]; then
    echo "$STAGED_FILES" | xargs togit-parser
    echo "done."
  fi
else
  echo -e "${BLUE}togit-parser not found in PATH, skipping...${RESET}"
fi

# Enforce conventional commit format
TYPES="feat|fix|chore|docs|style|refactor|perf|test"
errors=0
echo
echo -e "${GREEN}${BOLD} === RUNNING COMMIT FORMAT CHECK... === ${RESET}"
if ! echo "$COMMIT_MSG" | grep -Eq "^($TYPES)(\([a-z0-9-]+\))?: .+"; then
  echo
  echo -e "${RED}${BOLD}✖ Invalid Commit Message Format${RESET}"
  echo -e "   Please use: ${GREEN}<type>(<scope>): <subject> <task>${RESET}"
  echo -e "   Example   : ${GREEN}feat(api): add new endpoint for users #123${RESET}"
  echo -e "   Available Types     : ${GREEN}feat|fix|chore|docs|style|refactor|perf|test${RESET}"
  echo
  # sum 1 to errors
  errors=$((errors + 1))
fi
echo "done."

# Extract referenced tasks
REF_TASKS=$(grep -oE "#[0-9]+" <<<"$COMMIT_MSG" | sort -u)
REF_TASKS_ARRAY=($REF_TASKS)

# check that referenced tasks exists in todo.txt by running t ls
# example: 1 2025-07-14 prueba, so first field is the task number
echo "--- todo list output ---"
todo.sh -d "$CONFIG_FILE" ls
echo "------------------------"
for task in "${REF_TASKS_ARRAY[@]}"; do
  task=$(echo "$task" | xargs)
  task=${task//#/}
  todo_output=$(todo.sh -d "$CONFIG_FILE" ls | sed 's/\x1b\[[0-9;]*m//g')

  if ! echo "$todo_output" | grep -q "^$task"; then
    echo -e "${RED}${BOLD}✖ Task $task not found in todo.txt${RESET}"
    errors=$((errors + 1))
  else
    echo "✔ Task $task found!"
  fi
done

# Check if tasks are referenced
echo
echo -e "${GREEN}${BOLD} === RUNNING TASK REFERENCE CHECK... === ${RESET}"

if [[ ${#REF_TASKS_ARRAY[@]} -lt 1 ]]; then
  echo -e "${RED}${BOLD}✖ Missing Task Reference${RESET}"
  echo -e "   Every commit must reference at least one task ID (e.g. ${GREEN}#123${RESET})"
  echo
  echo -e "${BLUE}${BOLD}Suggested tasks from todo.txt:${RESET}"
  echo
  todo.sh -d "$CONFIG_FILE" ls
  echo
  errors=$((errors + 1))
  # exit 1
fi
echo "done."
# check if errors

if [[ "$errors" -gt 0 ]]; then
  echo
  echo -e "${RED}${BOLD}✖ Please fix the above errors and try again. To skip: --no-verify${RESET}"
  exit 1
fi

echo
echo -e "${GREEN}${BOLD} === COMMIT MSG OK. CHECKING TASKS TO CLOSE IF ANY...[do|done #n #n2] === ${RESET}"
# Extract tasks explicitly within [do #n #n2] or [done #n #n2]
DO_BLOCKS=$(grep -oP '\[(do|done)\s+#[0-9]+((\s+#[0-9]+)*)\]' <<<"$COMMIT_MSG")
# check if do | done blocks are present
if [[ -n "$DO_BLOCKS" ]]; then
  echo -e "${GREEN}${BOLD}✔ Found tasks to close: ${DO_BLOCKS[*]}${RESET}"
else
  echo -e "${BLUE}${BOLD}No tasks to close.${RESET}"
  exit 0
fi

DO_TASKS=()
for block in $DO_BLOCKS; do
  # Remove brackets and split by whitespace
  TASKS=$(sed -E 's/^\[(do|done)\s+//; s/\]$//' <<<"$block")
  for task in $TASKS; do
    # remove do and []
    TASK_NUM=$(sed 's/do//; s/\[//; s/\]//; s/#//; s/ //g' <<<"$task")
    DO_TASKS+=("$TASK_NUM")
  done
done

if [[ ${#DO_TASKS[@]} -gt 0 ]]; then
  echo -e "${GREEN}${BOLD}✔ Closing tasks: ${DO_TASKS[*]}${RESET}"
  todo.sh -d "$CONFIG_FILE" do "${DO_TASKS[@]}" -a
fi

exit 0
